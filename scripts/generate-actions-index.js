/*
 * ADOBE CONFIDENTIAL
 * ___________________
 * Copyright 2025 Adobe
 * All Rights Reserved.
 * NOTICE: All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 *  Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 */

import fs from 'fs';
import path from 'path';

const actionsDirectory = path.join(process.cwd(), 'server', 'src', 'actions');
const indexFile = path.join(actionsDirectory, 'index.ts');

// Read app name from package.json
const packageJsonPath = path.join(process.cwd(), 'package.json');
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
const appName = packageJson.name || 'mcp-server';

const adobeCopyrightHeader = `/*
 * ADOBE CONFIDENTIAL
 * ___________________
 * Copyright 2025 Adobe
 * All Rights Reserved.
 * NOTICE: All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 *  Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 */`;

const entries = fs.readdirSync(actionsDirectory, { withFileTypes: true });
const actionFolders = entries.filter(entry => {
  // Only include directories, excluding README.md and index.ts
  return entry.isDirectory();
});

const publishedActions = [];
const actionInfo = [];
for (const folder of actionFolders) {
  const actionIndexPath = path.join(actionsDirectory, folder.name, 'index.ts');
  
  // Check if index.ts exists in the folder
  if (!fs.existsSync(actionIndexPath)) {
    continue;
  }
  
  const content = fs.readFileSync(actionIndexPath, 'utf-8');
  if (/isPublished\s*:\s*true[\s,\n]/m.test(content)) {
    publishedActions.push(folder.name);
    // Try to extract the action name from name: 'actionName' in the file
    const nameMatch = content.match(/name\s*:\s*['"]([\w.-]+)['"]/);
    const actualActionName = nameMatch ? nameMatch[1] : folder.name;
    actionInfo.push({
      filename: folder.name,
      actionName: actualActionName
    });
  }
}

const importStatements = publishedActions.map(folderName => {
  const variableName = folderName.charAt(0).toLowerCase() + folderName.slice(1);
  return `import ${variableName} from './${folderName}';`;
}).join('\n');

const actionArray = publishedActions.map(folderName => {
  const variableName = folderName.charAt(0).toLowerCase() + folderName.slice(1);
  return `{
    ...${variableName},
    version: ${variableName}.version,
    fileName: '${folderName}/index.ts'
  }`;
}).join(',\n  ');

const indexContent = `${adobeCopyrightHeader}

// This file is auto-generated by scripts/generate-actions-index.js.
// Do not edit this file directly.

${importStatements}

const actions = [
  ${actionArray}
];

export default actions;
`;

fs.writeFileSync(indexFile, indexContent.trim() + '\n');

console.log(`\n[${appName}] Successfully generated server/src/actions/index.ts with ${publishedActions.length} MCP actions:`);
for (let i = 0; i < actionInfo.length; i++) {
  const info = actionInfo[i];
  console.log(`- ${info.filename} -> ${info.actionName} (version: 0.0.1)`);
} 