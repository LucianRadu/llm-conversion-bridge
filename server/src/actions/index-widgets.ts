/*
 * ADOBE CONFIDENTIAL
 * ___________________
 * Copyright 2025 Adobe
 * All Rights Reserved.
 * NOTICE: All information contained herein is, and remains
 * the property of Adobe and its suppliers, if any. The intellectual
 * and technical concepts contained herein are proprietary to Adobe
 * and its suppliers and are protected by all applicable intellectual
 * property laws, including trade secret and copyright laws.
 *  Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe.
 */

// This file is auto-generated by scripts/generate-aem-widgets-index.js.
// Do not edit this file directly.

import { widgetMeta as heartbeatWidgetMeta } from './heartbeatWidget/widget';
import { widgetMeta as helloWorldEDSMeta } from './helloWorldEDS/widget';
import { widgetMeta as systemStatusWidgetMeta } from './systemStatusWidget/widget';
import actions from './index';

export interface MCPResource {
  uri: string;
  name: string;
  description: string;
  mimeType: string;
  content: string;
  htmlFile?: string;
  _meta?: Record<string, any>;
}

// Widget resources with embedded HTML content
const heartbeatWidgetResource: MCPResource = {
  ...heartbeatWidgetMeta,
  content: `<!DOCTYPE html>
<html>
<head>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        html, body {
            width: 100%;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        }
        body {
            background: #f8f9fa;
        }
        .widget-container {
            width: 100%;
            min-height: 300px;
            padding: 36px;
            box-sizing: border-box;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 24px;
            border-bottom: 1px solid #dee2e6;
            margin-bottom: 36px;
        }
        .version {
            font-size: 13px;
            color: #6c757d;
            font-weight: 500;
        }
        .generated {
            font-size: 12px;
            color: #495057;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        }
        .content {
            max-width: 400px;
            margin: 0 auto;
            text-align: center;
            padding: 84px 30px;
        }
        .status {
            font-size: 64px;
            font-weight: 300;
            color: #28a745;
            margin-bottom: 24px;
        }
        .message {
            font-size: 14px;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="widget-container">
    <div class="header">
        <div class="version">v0.0.1</div>
        <div class="generated" id="generated">Generated at: <span id="timestamp"></span></div>
    </div>
    <div class="content">
        <div class="status">OK</div>
        <div class="message">Server is responding</div>
    </div>
    </div>
    <script>
        function updateWidget() {
            const data = window.openai?.toolOutput || {};
            const timestamp = data.timestamp || new Date().toISOString();
            document.getElementById('timestamp').textContent = timestamp;
        }

        // Listen for the openai:set_globals event when toolOutput becomes available
        window.addEventListener('openai:set_globals', (event) => {
            if (event.detail?.globals?.toolOutput !== undefined) {
                updateWidget();
            }
        });

        // Initial render in case data is already available
        if (window.openai?.toolOutput) {
            updateWidget();
        }
    </script>
</body>
</html>

`
};

const helloWorldEDSResource: MCPResource = {
  ...helloWorldEDSMeta,
  content: `<script src="https://main--chatgpt-eds--lucianradu.aem.live/scripts/aem-embed.js" type="module"></script>
<div>
    <aem-embed url="https://main--chatgpt-eds--lucianradu.aem.live/widgets/hello-world"></aem-embed>
</div>
`
};

const systemStatusWidgetResource: MCPResource = {
  ...systemStatusWidgetMeta,
  content: `<!DOCTYPE html>
<html>
<head>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        html, body {
            width: 100%;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        }
        body {
            background: #f8f9fa;
        }
        .widget-container {
            width: 100%;
            min-height: 400px;
            padding: 36px;
            box-sizing: border-box;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 24px;
            border-bottom: 1px solid #dee2e6;
            margin-bottom: 36px;
        }
        .version {
            font-size: 13px;
            color: #6c757d;
            font-weight: 500;
        }
        .generated {
            font-size: 12px;
            color: #495057;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
        }
        .content {
            max-width: 400px;
            margin: 0 auto;
        }
        .metric-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 24px 30px;
            border-bottom: 1px solid #e9ecef;
        }
        .metric-row:last-child {
            border-bottom: none;
        }
        .metric-label {
            font-size: 14px;
            color: #495057;
            font-weight: 500;
        }
        .metric-value {
            font-size: 14px;
            color: #212529;
            font-weight: 400;
        }
    </style>
</head>
<body>
    <div class="widget-container">
    <div class="header">
        <div class="version">v0.0.1</div>
        <div class="generated" id="generated">Generated at: <span id="timestamp"></span></div>
    </div>
    <div class="content">
        <div class="metric-row">
            <div class="metric-label">CPU Usage</div>
            <div class="metric-value" id="cpu">--</div>
        </div>
        <div class="metric-row">
            <div class="metric-label">Memory Usage</div>
            <div class="metric-value" id="memory">--</div>
        </div>
        <div class="metric-row">
            <div class="metric-label">Uptime</div>
            <div class="metric-value" id="uptime">--</div>
        </div>
        <div class="metric-row">
            <div class="metric-label">Active Sessions</div>
            <div class="metric-value" id="sessions">--</div>
        </div>
    </div>
    </div>
    <script>
        function updateWidget() {
            const data = window.openai?.toolOutput || {};

            document.getElementById('cpu').textContent = (data.cpuUsage || '--') + '%';
            document.getElementById('memory').textContent = (data.memoryUsage || '--') + '%';
            document.getElementById('uptime').textContent = data.uptime || '--';
            document.getElementById('sessions').textContent = data.sessions || '--';
            document.getElementById('timestamp').textContent = data.timestamp || new Date().toISOString();
        }

        // Listen for the openai:set_globals event when toolOutput becomes available
        window.addEventListener('openai:set_globals', (event) => {
            if (event.detail?.globals?.toolOutput !== undefined) {
                updateWidget();
            }
        });

        // Initial render in case data is already available
        if (window.openai?.toolOutput) {
            updateWidget();
        }
    </script>
</body>
</html>

`
};

// Dynamically collect resources for actions that have widgets
const staticResources: MCPResource[] = [
  // Add any static resources here if needed
];

// Add resources for actions with hasAemWidget: true
const widgetActions = actions.filter(action => action.hasAemWidget);
const widgetResources: MCPResource[] = widgetActions
  .map(action => {
    // Map widget actions to their corresponding resources
    if (action.name === 'Internal.heartbeatWidget') {
      return heartbeatWidgetResource;
    }
    if (action.name === 'helloWorldEDS') {
      return helloWorldEDSResource;
    }
    if (action.name === 'Internal.systemStatusWidget') {
      return systemStatusWidgetResource;
    }
    // Add more widget resources here as needed
    return null;
  })
  .filter(resource => resource !== null) as MCPResource[];

// Combine all resources
const resources: MCPResource[] = [...staticResources, ...widgetResources];

// Log AEM Widget registration with nice formatting (consistent with actions logging)
if (resources.length > 0) {
  console.log(`\n[llm-conversion-bridge] Successfully generated server/src/actions/index-widgets.ts with ${resources.length} AEM Widgets:`);
  resources.forEach(resource => {
    const resourceFile = resource.uri.split('/').pop();
    console.log(`- ${resourceFile} -> ${resource.name} (type: ${resource.mimeType})`);
  });
} else {
  console.log('[llm-conversion-bridge] No AEM Widgets registered');
}

// Log widget actions that have AEM Widgets
if (widgetActions.length > 0) {
  console.log(`\n[llm-conversion-bridge] Widget-enabled actions with AEM Widgets:`);
  widgetActions.forEach(action => {
    console.log(`- ${action.name}`);
  });
}

// Create lookup maps for efficient access
export const resourcesByUri = new Map<string, MCPResource>();

resources.forEach((resource) => {
  resourcesByUri.set(resource.uri, resource);
});

// Helper function to get resource by URI
export function getResourceByUri(uri: string) {
  const resource = resourcesByUri.get(uri);
  if (!resource) {
    return null;
  }
  
  return {
    contents: [
      {
        uri: resource.uri,
        mimeType: resource.mimeType,
        text: resource.content,
        _meta: resource._meta
      }
    ]
  };
}

export { resources };
export default resources;
